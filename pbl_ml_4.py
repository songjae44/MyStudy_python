# -*- coding: utf-8 -*-
"""pbl_ml_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewS_Lpu-lpeYI9sal2sxNPuFpgeeY7l4
"""

# 드라이브 마운트 후 데이터 불러오기

#from google.colab import drive
#drive.mount('/content/drive')

# 타이타닉 데이터 압축풀기

#!unzip titanic.zip

# train.csv파일 로드
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/dataset/train.csv')
df.head()

# 결측치 확인
df.isnull().sum()

# Age 열의 결측치를 평균값으로 채우기
df['Age'].fillna(df['Age'].mean(), inplace=True)

# Embarked 열의 결측치를 가장 빈번한 값으로 채우기
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# Cabin 열은 결측치가 너무 많으므로 삭제
df.drop('Cabin', axis=1, inplace=True)

# 결측치 사라진 것 확인
df.isnull().sum()

# 원-핫 인코딩할 범주형 변수 선택
categorical_cols = ['Sex', 'Embarked']

# pandas get_dummies() 함수를 사용하여 원-핫 인코딩
encoded_df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
# drop_first=True는 첫 번째 범주를 제거하여 더미 변수 트랩을 방지합니다.

# 결과 확인
encoded_df.head()

# 필요한 데이터만 추출
essential_features_encoded = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex_male', 'Embarked_Q', 'Embarked_S']
X_encoded = encoded_df[essential_features_encoded]
y_encoded = encoded_df['Survived']

from sklearn.model_selection import train_test_split

# 전처리된 데이터를 train, validation으로 분리(80% train, 20% validation)
X_train, X_val, y_train, y_val = train_test_split(
    X_encoded, y_encoded, test_size=0.2, random_state=42
)

import tensorflow as tf
from tensorflow import keras

# 모델 학습
model = keras.Sequential([
    keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)), # Input layer with 128 neurons and ReLU activation
    keras.layers.Dense(64, activation='relu'), # Hidden layer with 64 neurons and ReLU activation
    keras.layers.Dense(1, activation='sigmoid') # Output layer with 1 neuron and sigmoid activation for binary classification
])

# 모델 컴파일
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# 모델 학습
history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_val, y_val))

# 학습된 모델의 정확도 출력
_, accuracy = model.evaluate(X_val, y_val)
print('Accuracy on validation set: {:.2f}%'.format(accuracy * 100))

import matplotlib.pyplot as plt

# 학습 과정 시각화
# 정확도
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()
# loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()